metadata <- sample_metadata()
# Melt the pivot table for ggplot
melted_data <- reshape2::melt(pivot_df, id.vars = 'gene')
colnames(melted_data) <- c('AMR', 'Sample', 'Count')
# Debugging: Print the first few rows of the melted data
print("Melted Data:")
print(head(melted_data))
# Merge metadata with melted data using 'Sample' and 'sample_id'
melted_data <- merge(melted_data, metadata, by.x = "Sample", by.y = "sample_id", all.x = TRUE)
# Debugging: Print the first few rows after merging
print("Merged Data:")
print(head(melted_data))
# Check if merged data is empty
if (nrow(melted_data) == 0) {
showNotification("No data available after merging with metadata.", type = "warning")
return(NULL)
}
melted_data <- melted_data %>%
arrange(source, Sample)  # First by 'source', then by 'Sample' within each 'source'
# Ensure the Sample factor levels are in the sorted order
melted_data$Sample <- factor(melted_data$Sample, levels = unique(melted_data$Sample))
# Create a color palette for the 'source' using RColorBrewer
unique_sources <- unique(melted_data$source)
source_colors <- setNames(
RColorBrewer::brewer.pal(min(8, length(unique_sources)), "Dark2"),
unique_sources
)
# Create a color palette for the 'mash_group' using RColorBrewer
unique_mash_groups <- unique(melted_data$mash_group)
mash_group_colors <- setNames(
RColorBrewer::brewer.pal(min(8, length(unique_mash_groups)), "Set3"),
unique_mash_groups
)
# Create the static heatmap for AMR counts using ggplot2
heatmap <- ggplot(melted_data, aes(x = Sample, y = AMR, fill = as.factor(Count))) +
geom_tile(color = "gray") +
scale_fill_manual(
values = c("0" = "white", "1" = "dodgerblue1", "2" = "red", "3" = "limegreen", "4" = "black"),
name = "Count"
) +
theme_bw() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
legend.position = "right",
legend.text = element_text(size = 14),  # Doubled legend font size
legend.title = element_text(size = 16),  # Doubled legend title font size
plot.margin = margin(5, 5, 10, 10)
) +
labs(x = NULL, y = "Resistance Genes")
# Create the histogram for AMR abundance per sample
abundance_data <- melted_data %>% group_by(Sample) %>% summarise(Abundance = sum(Count))
abundance_data$Sample <- factor(abundance_data$Sample, levels = levels(melted_data$Sample))
histogram <- plot_ly(abundance_data, x = ~Sample, y = ~Abundance, type = 'bar', marker = list(color = 'dodgerblue3')) %>%
layout(
xaxis = list(title = ''),
yaxis = list(title = 'Abundance'),
barmode = 'stack',
margin = list(b = 150),
title = ''
)
# Add Mash group and Source color bars
# Add Mash group and Source color bars with controlled font sizes
mash_group_bar <- ggplot(unique(melted_data[, c("Sample", "mash_group")]), aes(x = Sample, y = 1, fill = mash_group)) +
geom_tile(height = 0.3) +
scale_fill_manual(values = mash_group_colors, name = "Mash Group") +
theme_void() +
theme(
legend.position = "bottom",
legend.title = element_text(size = 14, face = "bold"),   # Adjust legend title size and style
legend.text = element_text(size = 12)                   # Adjust legend text size
)
source_bar <- ggplot(unique(melted_data[, c("Sample", "source")]), aes(x = Sample, y = 1, fill = source)) +
geom_tile(height = 0.3) +
scale_fill_manual(values = source_colors, name = "Source") +
theme_void() +
theme(
legend.position = "bottom",
legend.title = element_text(size = 14, face = "bold"),   # Adjust legend title size and style
legend.text = element_text(size = 12)                   # Adjust legend text size
)
# Determine heights based on context (display vs download)
if (for_download) {
heatmap_height <- 40
} else {
heatmap_height <- 60  # Double the height for display; adjust as needed
}
# Combine the heatmap and color bars using patchwork
combined_plot <- (histogram / heatmap / mash_group_bar / source_bar) +
plot_layout(heights = c(5, heatmap_height, 2, 2), guides = "collect") &  # Adjusted heatmap height
theme(
plot.margin = margin(t = 10, b = 10, l = 10, r = 10),
legend.position = "bottom"
)
return(combined_plot)
}
# Render the static heatmap using ggplot2
output$amr_heatmap <- renderPlot({
combined_plot <- generate_combined_plot(for_download = FALSE)
if (is.null(combined_plot)) return(NULL)
print(combined_plot)
}, height = function() {
# Set the height to 1.5 times the default height
750  # Assuming the default height was 500, 500 * 1.5 = 750
})
# Download handler for the static plot
output$download_plot <- downloadHandler(
filename = function() {
paste("amr_heatmap", Sys.Date(), ".png", sep = "")
},
content = function(file) {
combined_plot <- generate_combined_plot(for_download = TRUE)
if (is.null(combined_plot)) {
showNotification("No plot available to download.", type = "error")
return(NULL)
}
# Save the combined plot to the specified file with standard height
ggsave(file, plot = combined_plot, width = 15, height = 10, dpi = 300)  # Standard height for download
}
)
}
getwd()
runApp()
?plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Create the static heatmap for AMR counts using ggplot2
heatmap <- ggplot(melted_data, aes(x = Sample, y = AMR, fill = as.factor(Count))) +
geom_tile(color = "gray") +
scale_fill_manual(
values = c("0" = "white", "1" = "blue", "2" = "red", "3" = "limegreen", "4" = "black"),
name = "Count"
) +
theme_bw() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
legend.position = "right",
legend.text = element_text(size = 14),  # Doubled legend font size
legend.title = element_text(size = 16),  # Doubled legend title font size
plot.margin = margin(5, 5, 10, 10)
) +
labs(x = NULL, y = "Resistance Genes")
gobj <- girafe(ggobj = heatmap,
options = list(
opts_hover(css = "fill:black; stroke: yellow;"),
opts_hover_inv(css = "opacity:0.2;"),
opts_zoom(max = 10)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(plotly)
fig <- plot_ly(midwest, x=~percollege, color=~state, type="box")
fig
fig
fig
remotes::install_github("plotly/dashR", upgrade = "always")
source("~/jj/scripts/R/plotly1.R", echo=TRUE)
install.packages("dashCoreComponents")
devtools::install_github('rstudio/leaflet')
library(ggplot2)
library(ggiraph)
data <- mtcars
data$carname <- row.names(data)
gg_point = ggplot(data = data) +
geom_point_interactive(aes(x = wt, y = qsec, color = disp,
tooltip = carname, data_id = carname)) +
theme_minimal()
girafe(ggobj = gg_point)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
? girafe
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tooltips
?girafe
runApp()
install.packages("htmlwidgets")
shiny::runApp()
runApp()
source("~/jj/scripts/R/ggiraph1.R", echo=TRUE)
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/EcoliGenomics/SQLite_database/eColi_ShinyApp/modules/server/plots_server.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/EcoliGenomics/SQLite_database/eColi_ShinyApp/modules/server/plots_server.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
}?tooltip
?tooltip
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/EcoliGenomics/SQLite_database/eColi_ShinyApp/app.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/EcoliGenomics/SQLite_database/eColi_ShinyApp/app.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/EcoliGenomics/SQLite_database/eColi_ShinyApp/modules/ui/cgview_ui.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
BiocManager::install("rtracklayer")
install.packages("jsonlite")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
>>>>>>> colorpicker
